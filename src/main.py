#!/bin/env python3.10
import logging
import datetime

from telegram.ext import (
    CommandHandler,
    ApplicationBuilder,
    MessageHandler,
    filters,
    CallbackQueryHandler,
)

from telegram import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)

# local imports
import config
import mongo_ops


LOGGER = logging.getLogger(__name__)

ADMIN_IDS = [136858809, 777855967]
IMPORTANT_INFO_TEXT = ["–û–±—ä—è–≤–ª–µ–Ω–∏—è –µ—â–µ –Ω–µ—Ç!"]
CAMP_RULES_TEXT = """
–î–æ—Ä–æ–≥–æ–π –≥–æ—Å—Ç—å! –ù–∞—à–∞ —Ä–µ–∑–∏–¥–µ–Ω—Ü–∏—è —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –Ω–∞ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ –∫—Ä–∞—Å–∏–≤–æ–π —á–∞—Å—Ç–Ω–æ–π —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏. –ù–∞—à–∞ –≥–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å - –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –∏ –ø—Ä–∏ —ç—Ç–æ–º –Ω–µ –ø—Ä–∏—á–∏–Ω–∏—Ç—å –≤—Ä–µ–¥–∞ –ª–µ—Å—É, —Å–µ–±–µ –∏ –¥—Ä—É–≥ –¥—Ä—É–≥—É ü´∂

–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤:
 1. –í —Ü–µ–ª—è—Ö –Ω–∞—à–µ–π –æ–±—â–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ —Ä–∞–∑–≤–æ–¥–∏—Ç—å –∫–æ—Å—Ç—Ä–æ–≤, –¥–∞–∂–µ –≤ –º–∞–Ω–≥–∞–ª–∞—Ö! 
 2. –ü–æ–º–Ω–∏—Ç—å, —á—Ç–æ –Ω–∞ –ø–ª–æ—â–∞–¥–∫–µ –µ—Å—Ç—å –¥–µ—Ç–∏!
 3. –°–æ–±–ª—é–¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —Ä–∞–∑–¥–µ–ª—å–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –º—É—Å–æ—Ä–∞ –¥–µ–π—Å—Ç–≤—É—é—â–∏–µ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –≤—Å–µ–π —Ä–µ–∑–∏–¥–µ–Ω—Ü–∏–∏. –í–∞—Å —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é—Ç –Ω–∞—à–∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä—ã.
 4. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å –∏–ª–∏ —É –≤–∞—Å –ø–æ—è–≤–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã - –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –ª—é–±–æ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –∏–Ω—Ñ–æ—Ü–µ–Ω—Ç—Ä–∞, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –Ω–∞–ø—Ä–æ—Ç–∏–≤ —Ñ—É–¥–∫–æ—Ä—Ç–∞.
 5. –ú–µ–¥–ø—É–Ω–∫—Ç –≤—Å–µ–≥–¥–∞ –≤–∞–º –ø–æ–º–æ–∂–µ—Ç! –Ω–µ –ø–∞–Ω–∏–∫–æ–≤–∞—Ç—å –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±—â–∞—Ç—å—Å—è –∫ –Ω–∏–º.
 6. –£–≤–∞–∂–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞, –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ–± –æ–∫—Ä—É–∂–∞—é—â–∏—Ö –ª—é–¥—è—Ö –∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ ‚ù§Ô∏è
"""

LANDSCAPE_OBJECTS_DICT = {
    "text_camp": "–ª–∞–≥–µ—Ä—å",
    "text_grosery": "–≥–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è",
    "text_main_stage": "main stage",
    "text_amphitheater": "–∞–º—Ñ–∏—Ç–µ–∞—Ç—Ä",
    "text_backstage": "–∑–∞–∫—É–ª–∏—Å—å–µ",
}

PROGRAM_LOCATION_DICT = {
    "program_main_stage": "main stage",
    "program_amphitheater": "–∞–º—Ñ–∏—Ç–µ–∞—Ç—Ä",
    "program_backstage": "–∑–∞–∫—É–ª–∏—Å—å–µ",
}

MAIN_KEYBOARD = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–∫–∞—Ä—Ç–∞"), KeyboardButton(text="—á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç")],
        [KeyboardButton(text="–ø—Ä–æ–≥—Ä–∞–º–º–∞"), KeyboardButton(text="–º—É–∑—ã–∫–∞")],
        [
            KeyboardButton(text="–ø—Ä–∞–≤–∏–ª–∞ –ª–∞–≥–µ—Ä—è"),
            KeyboardButton(text="–ª–∞–Ω–¥—à–∞—Ñ—Ç–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã"),
        ],
        [KeyboardButton(text="–≤–∞–∂–Ω–æ–µ"), KeyboardButton(text="—Ç—Ä–∞–Ω—Å—Ñ–µ—Ä")],
    ],
    resize_keyboard=True,
    is_persistent=True,
    one_time_keyboard=False,
)

PROGRAM_KEYBOARD = InlineKeyboardMarkup(
    [
        [InlineKeyboardButton("main stage", callback_data="program_main_stage")],
        [InlineKeyboardButton("–∞–º—Ñ–∏—Ç–µ–∞—Ç—Ä", callback_data="program_amphitheater")],
        [InlineKeyboardButton("–∑–∞–∫—É–ª–∏—Å—å–µ", callback_data="program_backstage")],
    ]
)

LANDSCAPE_KEYBOARD = InlineKeyboardMarkup(
    [
        [InlineKeyboardButton("–ª–∞–≥–µ—Ä—å", callback_data="text_camp")],
        [InlineKeyboardButton("–≥–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è", callback_data="text_grosery")],
        [InlineKeyboardButton("main stage", callback_data="text_main_stage")],
        [InlineKeyboardButton("–∞–º—Ñ–∏—Ç–µ–∞—Ç—Ä", callback_data="text_amphitheater")],
        [InlineKeyboardButton("–∑–∞–∫—É–ª–∏—Å—å–µ", callback_data="text_backstage")],
    ]
)

TRANSFER_KEYBOARD = InlineKeyboardMarkup(
    [
        [
            InlineKeyboardButton("—Ç—É–¥–∞", callback_data="forward_trip_jpg"),
            InlineKeyboardButton("–æ–±—Ä–∞—Ç–Ω–æ", callback_data="back_trip_jpg"),
        ]
    ]
)


async def start(update, context):
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–†–∞–±–æ—Ç–∞ —Å –±–æ—Ç–æ–º –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏",
        reply_markup=MAIN_KEYBOARD,
    )


def create_lectors_text(lectors_list):
    output_message = ""

    if lectors_list is None:
        return "–Ω–µ—Ç –ª–µ–∫—Ç–æ—Ä–æ–≤"

    if isinstance(lectors_list, list):
        for lector in lectors_list:
            output_message += lector["name"] + ", "
    else:
        output_message += lectors_list["name"]

    return output_message


async def get_map(update, context):
    photo_data_jpg = mongo_ops.get_file_by_name("map_jpg")
    photo_data_pdf = mongo_ops.get_file_by_name("map_pdf")

    if not all([photo_data_jpg, photo_data_pdf]):
        await context.bot.send_message(
            chat_id=update.effective_chat.id, text="–ù–µ –º–æ–≥—É –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç—É."
        )

    if photo_data_jpg is not None:
        photo_map = photo_data_jpg[1]
        await context.bot.send_photo(chat_id=update.effective_chat.id, photo=photo_map)

    if photo_data_pdf is not None:
        file_name, photo_map = photo_data_pdf
        await context.bot.send_document(
            chat_id=update.effective_chat.id,
            document=photo_map,
            filename=file_name,
        )


async def get_current_events(update, context):
    user_time = datetime.datetime.now()
    current_events = mongo_ops.get_events_by_user_time(user_time)
    if current_events is None:
        await context.bot.send_message(
            chat_id=update.effective_chat.id, text="–Ω–µ –º–æ–≥—É –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è."
        )
        return

    if len(current_events) == 0:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç.",
        )
        return

    buttons = []
    for event in current_events:
        event_name = event.get("name")
        if event_name is not None:
            buttons.append(
                [InlineKeyboardButton(text=event_name, callback_data=event_name[:10])]
            )

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–°–µ–π—á–∞—Å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç:",
        reply_markup=InlineKeyboardMarkup(buttons),
    )


async def get_programm(update, context):
    photo_data_jpg = mongo_ops.get_file_by_name("program_jpg")
    photo_data_pdf = mongo_ops.get_file_by_name("program_pdf")

    if not all([photo_data_pdf, photo_data_jpg]):
        await context.bot.send_message(
            chat_id=update.effective_chat.id, text="–Ω–µ –º–æ–≥—É –ø—Ä–∏—Å–ª–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É."
        )

    if photo_data_jpg is not None:
        photo_program = photo_data_jpg[1]
        await context.bot.send_photo(
            chat_id=update.effective_chat.id, photo=photo_program
        )

    if photo_data_pdf is not None:
        file_name, photo_program = photo_data_pdf
        await context.bot.send_document(
            chat_id=update.effective_chat.id,
            document=photo_program,
            filename=file_name,
        )

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–π –ø–ª–æ—â–∞–¥–∫–µ:",
        reply_markup=PROGRAM_KEYBOARD,
    )


async def get_music(update, context):
    photo_data_jpg = mongo_ops.get_file_by_name("music_jpg")
    photo_data_pdf = mongo_ops.get_file_by_name("music_pdf")

    if not all([photo_data_jpg, photo_data_pdf]):
        await context.bot.send_message(
            chat_id=update.effective_chat.id, text="–ù–µ –º–æ–≥—É –∑–∞–≥—Ä—É–∑–∏—Ç—å –º—É–∑—ã–∫—É."
        )

    if photo_data_jpg is not None:
        photo_jpg = photo_data_jpg[1]
        await context.bot.send_photo(chat_id=update.effective_chat.id, photo=photo_jpg)

    if photo_data_pdf is not None:
        file_name, photo_music = photo_data_pdf
        await context.bot.send_document(
            chat_id=update.effective_chat.id,
            document=photo_music,
            filename=file_name,
        )


async def get_camp_rules(update, context):
    await context.bot.send_message(
        chat_id=update.effective_chat.id, text=CAMP_RULES_TEXT
    )


async def get_landscape_objects(update, context):
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="sent you your landscape objects",
        reply_markup=LANDSCAPE_KEYBOARD,
    )


async def get_important_info(update, context):
    await context.bot.send_message(
        chat_id=update.effective_chat.id, text=IMPORTANT_INFO_TEXT[-1]
    )


async def get_transfer_info(update, context):
    file = mongo_ops.get_file_by_name("transfer_jpg")
    if file is None:
        return

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–¢—Ä–∞–Ω—Å—Ñ–µ—Ä:",
    )
    _, file_data = file
    await context.bot.send_photo(
        chat_id=update.effective_chat.id,
        photo=file_data,
    )


async def inline_button(update, context):
    query = update.callback_query
    data = query.data
    await query.answer()

    if data in LANDSCAPE_OBJECTS_DICT:
        await context.bot.send_message(
            chat_id=update.effective_chat.id, text=f"landscape {data}"
        )

    elif data in PROGRAM_LOCATION_DICT:
        events = mongo_ops.get_events_by_location(PROGRAM_LOCATION_DICT.get(data))
        if events is None:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"–Ω–µ –º–æ–≥—É –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è: {data}",
            )
            return
        buttons = []
        for event in events:
            event_name = event.get("name")
            event_id = event.get("_id")

            if event_name is not None:
                buttons.append(
                    [
                        InlineKeyboardButton(
                            text=f"{event_name}",
                            callback_data="Bot_program_event!" + str(event_id),
                        )
                    ]
                )

        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è: {PROGRAM_LOCATION_DICT[data]}",
            reply_markup=InlineKeyboardMarkup(buttons),
        )

    elif "Bot_program_event" in data:
        query = update.callback_query
        data = query.data
        await query.answer()

        event = mongo_ops.get_event_by_id(data[18:])

        if event is not None:
            name = event.get("name")
            if name is None:
                name = "–ù–∞–∑–≤–∞–Ω–∏—è –Ω–µ—Ç"

            lectors = create_lectors_text(event.get("speakers"))

            description = event.get("description")
            if description is None:
                description = "–û–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç"
            time_start = event.get("start_time")
            time_end = event.get("end_time")

            print(time_start.strftime("%H:%M"))

            output_text = f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>: {name}\n\n<b>–õ–µ–∫—Ç–æ—Ä</b>: {lectors}\n\n<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {description}\n\n<b>–í—Ä–µ–º—è</b>: {time_start.strftime("%H:%M")} - {time_end.strftime("%H:%M")}'
            await context.bot.send_message(
                chat_id=update.effective_chat.id, text=output_text, parse_mode="html"
            )

    else:
        file_data = mongo_ops.get_file_by_name(data)
        if file_data is not None:
            file_name, presentation = file_data
            await context.bot.send_document(
                chat_id=update.effective_chat.id,
                document=presentation,
                filename=file_name,
            )


async def announcement(update, context):
    if not update.effective_chat.id in ADMIN_IDS:
        return

    admin_announcement = update.message.text

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f"–°–æ–æ–±—â–µ–Ω–∏–µ: '{admin_announcement}' –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏—è",
    )
    IMPORTANT_INFO_TEXT.append(admin_announcement)


def main():
    try:
        app = ApplicationBuilder().token(config.BOT_TOKEN).build()
    except Exception as e:
        LOGGER.critical(f"{e}")
        exit(1)

    app.add_handler(CommandHandler("start", start))

    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^–∫–∞—Ä—Ç–∞$"), get_map))
    app.add_handler(
        MessageHandler(
            filters.TEXT & filters.Regex("^—á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç$"), get_current_events
        )
    )
    app.add_handler(
        MessageHandler(filters.TEXT & filters.Regex("^–ø—Ä–æ–≥—Ä–∞–º–º–∞$"), get_programm)
    )
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^–º—É–∑—ã–∫–∞$"), get_music))
    app.add_handler(
        MessageHandler(filters.TEXT & filters.Regex("^–ø—Ä–∞–≤–∏–ª–∞ –ª–∞–≥–µ—Ä—è$"), get_camp_rules)
    )
    app.add_handler(
        MessageHandler(
            filters.TEXT & filters.Regex("^–ª–∞–Ω–¥—à–∞—Ñ—Ç–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã$"), get_landscape_objects
        )
    )
    app.add_handler(
        MessageHandler(filters.TEXT & filters.Regex("^–≤–∞–∂–Ω–æ–µ$"), get_important_info)
    )
    app.add_handler(
        MessageHandler(filters.TEXT & filters.Regex("^—Ç—Ä–∞–Ω—Å—Ñ–µ—Ä$"), get_transfer_info)
    )

    app.add_handler(CallbackQueryHandler(inline_button))

    app.add_handler(MessageHandler(filters.TEXT, announcement))

    # start
    app.run_polling()


if __name__ == "__main__":
    main()
